import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn, CreateDateColumn, UpdateDateColumn } from 'typeorm';
import { Stock } from './stock.entity';
import { User } from '../../auth/entities/user.entity';
import { Tenant } from '../../tenant/entities/tenant.entity';

export enum StockAlertType {
  LOW_STOCK = 'low_stock',
  CRITICAL_STOCK = 'critical_stock',
  OUT_OF_STOCK = 'out_of_stock',
  EXPIRY_WARNING = 'expiry_warning',
  OVERSTOCK = 'overstock',
}

export enum StockAlertStatus {
  ACTIVE = 'active',
  ACKNOWLEDGED = 'acknowledged',
  RESOLVED = 'resolved',
  DISMISSED = 'dismissed',
}

export enum StockAlertPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical',
}

@Entity()
export class StockAlert {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({
    type: 'enum',
    enum: StockAlertType,
  })
  type: StockAlertType;

  @Column({
    type: 'enum',
    enum: StockAlertStatus,
    default: StockAlertStatus.ACTIVE,
  })
  status: StockAlertStatus;

  @Column({
    type: 'enum',
    enum: StockAlertPriority,
    default: StockAlertPriority.MEDIUM,
  })
  priority: StockAlertPriority;

  @Column()
  title: string;

  @Column()
  message: string;

  @Column({ type: 'decimal', precision: 10, scale: 2 })
  currentQuantity: number;

  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: true })
  thresholdQuantity: number;

  @Column({ nullable: true })
  recommendedAction: string;

  @Column({ nullable: true })
  expiryDate: Date; // For expiry warnings

  @Column({ default: false })
  isAutoGenerated: boolean;

  @Column({ nullable: true })
  acknowledgedAt: Date;

  @Column({ nullable: true })
  resolvedAt: Date;

  @ManyToOne(() => Stock)
  @JoinColumn()
  stock: Stock;

  @Column()
  stockId: string;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn()
  acknowledgedBy: User;

  @Column({ nullable: true })
  acknowledgedById: string;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn()
  resolvedBy: User;

  @Column({ nullable: true })
  resolvedById: string;

  @ManyToOne(() => Tenant)
  @JoinColumn({ name: 'tenantId' })
  tenant: Tenant;

  @Column({ nullable: true })
  tenantId: string;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;
}
